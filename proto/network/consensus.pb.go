// Code generated by protoc-gen-go. DO NOT EDIT.
// source: consensus.proto

package network

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BlockRetrievalStatus int32

const (
	// Successfully fill in the request.
	BlockRetrievalStatus_SUCCEEDED BlockRetrievalStatus = 0
	// Can not find the block corresponding to block_id.
	BlockRetrievalStatus_ID_NOT_FOUND BlockRetrievalStatus = 1
	// Can not find enough blocks but find some.
	BlockRetrievalStatus_NOT_ENOUGH_BLOCKS BlockRetrievalStatus = 2
)

var BlockRetrievalStatus_name = map[int32]string{
	0: "SUCCEEDED",
	1: "ID_NOT_FOUND",
	2: "NOT_ENOUGH_BLOCKS",
}

var BlockRetrievalStatus_value = map[string]int32{
	"SUCCEEDED":         0,
	"ID_NOT_FOUND":      1,
	"NOT_ENOUGH_BLOCKS": 2,
}

func (x BlockRetrievalStatus) String() string {
	return proto.EnumName(BlockRetrievalStatus_name, int32(x))
}

func (BlockRetrievalStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_56f0f2c53b3de771, []int{0}
}

type ConsensusMsg struct {
	// Types that are valid to be assigned to Message:
	//	*ConsensusMsg_Proposal
	//	*ConsensusMsg_Vote
	//	*ConsensusMsg_RequestBlock
	//	*ConsensusMsg_RespondBlock
	//	*ConsensusMsg_TimeoutMsg
	//	*ConsensusMsg_SyncInfo
	Message              isConsensusMsg_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ConsensusMsg) Reset()         { *m = ConsensusMsg{} }
func (m *ConsensusMsg) String() string { return proto.CompactTextString(m) }
func (*ConsensusMsg) ProtoMessage()    {}
func (*ConsensusMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f0f2c53b3de771, []int{0}
}

func (m *ConsensusMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsensusMsg.Unmarshal(m, b)
}
func (m *ConsensusMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsensusMsg.Marshal(b, m, deterministic)
}
func (m *ConsensusMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusMsg.Merge(m, src)
}
func (m *ConsensusMsg) XXX_Size() int {
	return xxx_messageInfo_ConsensusMsg.Size(m)
}
func (m *ConsensusMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusMsg proto.InternalMessageInfo

type isConsensusMsg_Message interface {
	isConsensusMsg_Message()
}

type ConsensusMsg_Proposal struct {
	Proposal *Proposal `protobuf:"bytes,1,opt,name=proposal,proto3,oneof"`
}

type ConsensusMsg_Vote struct {
	Vote *Vote `protobuf:"bytes,2,opt,name=vote,proto3,oneof"`
}

type ConsensusMsg_RequestBlock struct {
	RequestBlock *RequestBlock `protobuf:"bytes,3,opt,name=request_block,json=requestBlock,proto3,oneof"`
}

type ConsensusMsg_RespondBlock struct {
	RespondBlock *RespondBlock `protobuf:"bytes,4,opt,name=respond_block,json=respondBlock,proto3,oneof"`
}

type ConsensusMsg_TimeoutMsg struct {
	TimeoutMsg *TimeoutMsg `protobuf:"bytes,5,opt,name=timeout_msg,json=timeoutMsg,proto3,oneof"`
}

type ConsensusMsg_SyncInfo struct {
	SyncInfo *SyncInfo `protobuf:"bytes,6,opt,name=sync_info,json=syncInfo,proto3,oneof"`
}

func (*ConsensusMsg_Proposal) isConsensusMsg_Message() {}

func (*ConsensusMsg_Vote) isConsensusMsg_Message() {}

func (*ConsensusMsg_RequestBlock) isConsensusMsg_Message() {}

func (*ConsensusMsg_RespondBlock) isConsensusMsg_Message() {}

func (*ConsensusMsg_TimeoutMsg) isConsensusMsg_Message() {}

func (*ConsensusMsg_SyncInfo) isConsensusMsg_Message() {}

func (m *ConsensusMsg) GetMessage() isConsensusMsg_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *ConsensusMsg) GetProposal() *Proposal {
	if x, ok := m.GetMessage().(*ConsensusMsg_Proposal); ok {
		return x.Proposal
	}
	return nil
}

func (m *ConsensusMsg) GetVote() *Vote {
	if x, ok := m.GetMessage().(*ConsensusMsg_Vote); ok {
		return x.Vote
	}
	return nil
}

func (m *ConsensusMsg) GetRequestBlock() *RequestBlock {
	if x, ok := m.GetMessage().(*ConsensusMsg_RequestBlock); ok {
		return x.RequestBlock
	}
	return nil
}

func (m *ConsensusMsg) GetRespondBlock() *RespondBlock {
	if x, ok := m.GetMessage().(*ConsensusMsg_RespondBlock); ok {
		return x.RespondBlock
	}
	return nil
}

func (m *ConsensusMsg) GetTimeoutMsg() *TimeoutMsg {
	if x, ok := m.GetMessage().(*ConsensusMsg_TimeoutMsg); ok {
		return x.TimeoutMsg
	}
	return nil
}

func (m *ConsensusMsg) GetSyncInfo() *SyncInfo {
	if x, ok := m.GetMessage().(*ConsensusMsg_SyncInfo); ok {
		return x.SyncInfo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ConsensusMsg) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ConsensusMsg_Proposal)(nil),
		(*ConsensusMsg_Vote)(nil),
		(*ConsensusMsg_RequestBlock)(nil),
		(*ConsensusMsg_RespondBlock)(nil),
		(*ConsensusMsg_TimeoutMsg)(nil),
		(*ConsensusMsg_SyncInfo)(nil),
	}
}

type Proposal struct {
	// The proposed block
	ProposedBlock *Block `protobuf:"bytes,1,opt,name=proposed_block,json=proposedBlock,proto3" json:"proposed_block,omitempty"`
	// Information about the highest QC, LedgerInfo, TimeoutCertificate, etc.
	SyncInfo             *SyncInfo `protobuf:"bytes,2,opt,name=sync_info,json=syncInfo,proto3" json:"sync_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Proposal) Reset()         { *m = Proposal{} }
func (m *Proposal) String() string { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()    {}
func (*Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f0f2c53b3de771, []int{1}
}

func (m *Proposal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Proposal.Unmarshal(m, b)
}
func (m *Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Proposal.Marshal(b, m, deterministic)
}
func (m *Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal.Merge(m, src)
}
func (m *Proposal) XXX_Size() int {
	return xxx_messageInfo_Proposal.Size(m)
}
func (m *Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal proto.InternalMessageInfo

func (m *Proposal) GetProposedBlock() *Block {
	if m != nil {
		return m.ProposedBlock
	}
	return nil
}

func (m *Proposal) GetSyncInfo() *SyncInfo {
	if m != nil {
		return m.SyncInfo
	}
	return nil
}

type PacemakerTimeout struct {
	// Round that has timed out (e.g. we propose to switch to round + 1)
	Round uint64 `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	// Author of timeout
	Author []byte `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	// Signature that this timeout was authored by owner
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// Optional vote for the given round
	Vote                 *Vote    `protobuf:"bytes,4,opt,name=vote,proto3" json:"vote,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PacemakerTimeout) Reset()         { *m = PacemakerTimeout{} }
func (m *PacemakerTimeout) String() string { return proto.CompactTextString(m) }
func (*PacemakerTimeout) ProtoMessage()    {}
func (*PacemakerTimeout) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f0f2c53b3de771, []int{2}
}

func (m *PacemakerTimeout) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacemakerTimeout.Unmarshal(m, b)
}
func (m *PacemakerTimeout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacemakerTimeout.Marshal(b, m, deterministic)
}
func (m *PacemakerTimeout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacemakerTimeout.Merge(m, src)
}
func (m *PacemakerTimeout) XXX_Size() int {
	return xxx_messageInfo_PacemakerTimeout.Size(m)
}
func (m *PacemakerTimeout) XXX_DiscardUnknown() {
	xxx_messageInfo_PacemakerTimeout.DiscardUnknown(m)
}

var xxx_messageInfo_PacemakerTimeout proto.InternalMessageInfo

func (m *PacemakerTimeout) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *PacemakerTimeout) GetAuthor() []byte {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *PacemakerTimeout) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PacemakerTimeout) GetVote() *Vote {
	if m != nil {
		return m.Vote
	}
	return nil
}

type TimeoutMsg struct {
	// Information about the highest QC, LedgerInfo, TimeoutCertificate, etc.
	SyncInfo *SyncInfo `protobuf:"bytes,1,opt,name=sync_info,json=syncInfo,proto3" json:"sync_info,omitempty"`
	// Timeout
	PacemakerTimeout *PacemakerTimeout `protobuf:"bytes,2,opt,name=pacemaker_timeout,json=pacemakerTimeout,proto3" json:"pacemaker_timeout,omitempty"`
	// Signature that this timeout was authored by owner
	Signature            []byte   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeoutMsg) Reset()         { *m = TimeoutMsg{} }
func (m *TimeoutMsg) String() string { return proto.CompactTextString(m) }
func (*TimeoutMsg) ProtoMessage()    {}
func (*TimeoutMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f0f2c53b3de771, []int{3}
}

func (m *TimeoutMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeoutMsg.Unmarshal(m, b)
}
func (m *TimeoutMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeoutMsg.Marshal(b, m, deterministic)
}
func (m *TimeoutMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeoutMsg.Merge(m, src)
}
func (m *TimeoutMsg) XXX_Size() int {
	return xxx_messageInfo_TimeoutMsg.Size(m)
}
func (m *TimeoutMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeoutMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TimeoutMsg proto.InternalMessageInfo

func (m *TimeoutMsg) GetSyncInfo() *SyncInfo {
	if m != nil {
		return m.SyncInfo
	}
	return nil
}

func (m *TimeoutMsg) GetPacemakerTimeout() *PacemakerTimeout {
	if m != nil {
		return m.PacemakerTimeout
	}
	return nil
}

func (m *TimeoutMsg) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type SyncInfo struct {
	// Highest quorum certificate
	HighestQuorumCert *QuorumCert `protobuf:"bytes,1,opt,name=highest_quorum_cert,json=highestQuorumCert,proto3" json:"highest_quorum_cert,omitempty"`
	// Highest ledger info
	HighestLedgerInfo *QuorumCert `protobuf:"bytes,2,opt,name=highest_ledger_info,json=highestLedgerInfo,proto3" json:"highest_ledger_info,omitempty"`
	// Optional highest timeout certificate if available
	HighestTimeoutCert   *PacemakerTimeoutCertificate `protobuf:"bytes,3,opt,name=highest_timeout_cert,json=highestTimeoutCert,proto3" json:"highest_timeout_cert,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *SyncInfo) Reset()         { *m = SyncInfo{} }
func (m *SyncInfo) String() string { return proto.CompactTextString(m) }
func (*SyncInfo) ProtoMessage()    {}
func (*SyncInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f0f2c53b3de771, []int{4}
}

func (m *SyncInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncInfo.Unmarshal(m, b)
}
func (m *SyncInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncInfo.Marshal(b, m, deterministic)
}
func (m *SyncInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncInfo.Merge(m, src)
}
func (m *SyncInfo) XXX_Size() int {
	return xxx_messageInfo_SyncInfo.Size(m)
}
func (m *SyncInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SyncInfo proto.InternalMessageInfo

func (m *SyncInfo) GetHighestQuorumCert() *QuorumCert {
	if m != nil {
		return m.HighestQuorumCert
	}
	return nil
}

func (m *SyncInfo) GetHighestLedgerInfo() *QuorumCert {
	if m != nil {
		return m.HighestLedgerInfo
	}
	return nil
}

func (m *SyncInfo) GetHighestTimeoutCert() *PacemakerTimeoutCertificate {
	if m != nil {
		return m.HighestTimeoutCert
	}
	return nil
}

type PacemakerTimeoutCertificate struct {
	// Round for which this certificate was created
	Round uint64 `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	// List of certified timeouts
	Timeouts             []*PacemakerTimeout `protobuf:"bytes,2,rep,name=timeouts,proto3" json:"timeouts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PacemakerTimeoutCertificate) Reset()         { *m = PacemakerTimeoutCertificate{} }
func (m *PacemakerTimeoutCertificate) String() string { return proto.CompactTextString(m) }
func (*PacemakerTimeoutCertificate) ProtoMessage()    {}
func (*PacemakerTimeoutCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f0f2c53b3de771, []int{5}
}

func (m *PacemakerTimeoutCertificate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacemakerTimeoutCertificate.Unmarshal(m, b)
}
func (m *PacemakerTimeoutCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacemakerTimeoutCertificate.Marshal(b, m, deterministic)
}
func (m *PacemakerTimeoutCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacemakerTimeoutCertificate.Merge(m, src)
}
func (m *PacemakerTimeoutCertificate) XXX_Size() int {
	return xxx_messageInfo_PacemakerTimeoutCertificate.Size(m)
}
func (m *PacemakerTimeoutCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_PacemakerTimeoutCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_PacemakerTimeoutCertificate proto.InternalMessageInfo

func (m *PacemakerTimeoutCertificate) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *PacemakerTimeoutCertificate) GetTimeouts() []*PacemakerTimeout {
	if m != nil {
		return m.Timeouts
	}
	return nil
}

type Block struct {
	// This block's id as a hash value
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Parent block id of this block as a hash value (all zeros to indicate the
	// genesis block)
	ParentId []byte `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// Payload of the block (e.g. one or more transaction(s)
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	// The round of the block (internal monotonically increasing counter).
	Round uint64 `protobuf:"varint,4,opt,name=round,proto3" json:"round,omitempty"`
	// The height of the block (position in the chain).
	Height uint64 `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	// The approximate physical microseconds since the epoch when the block was proposed
	TimestampUsecs uint64 `protobuf:"varint,6,opt,name=timestamp_usecs,json=timestampUsecs,proto3" json:"timestamp_usecs,omitempty"`
	// Contains the quorum certified ancestor and whether the quorum certified
	// ancestor was voted on successfully
	QuorumCert *QuorumCert `protobuf:"bytes,7,opt,name=quorum_cert,json=quorumCert,proto3" json:"quorum_cert,omitempty"`
	// Author of the block that can be validated by the author's public key and
	// the signature
	Author []byte `protobuf:"bytes,8,opt,name=author,proto3" json:"author,omitempty"`
	// Signature that the hash of this block has been authored by the owner of the
	// private key
	Signature            []byte   `protobuf:"bytes,9,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f0f2c53b3de771, []int{6}
}

func (m *Block) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block.Unmarshal(m, b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block.Marshal(b, m, deterministic)
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return xxx_messageInfo_Block.Size(m)
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Block) GetParentId() []byte {
	if m != nil {
		return m.ParentId
	}
	return nil
}

func (m *Block) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Block) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *Block) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Block) GetTimestampUsecs() uint64 {
	if m != nil {
		return m.TimestampUsecs
	}
	return 0
}

func (m *Block) GetQuorumCert() *QuorumCert {
	if m != nil {
		return m.QuorumCert
	}
	return nil
}

func (m *Block) GetAuthor() []byte {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *Block) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type QuorumCert struct {
	// The vote information certified by the quorum.
	VoteData *VoteData `protobuf:"bytes,1,opt,name=vote_data,json=voteData,proto3" json:"vote_data,omitempty"`
	// LedgerInfo with at least 2f+1 signatures. The LedgerInfo's consensus data
	// hash is a digest that covers vote data hash.
	SignedLedgerInfo     *LedgerInfoWithSignatures `protobuf:"bytes,2,opt,name=signed_ledger_info,json=signedLedgerInfo,proto3" json:"signed_ledger_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *QuorumCert) Reset()         { *m = QuorumCert{} }
func (m *QuorumCert) String() string { return proto.CompactTextString(m) }
func (*QuorumCert) ProtoMessage()    {}
func (*QuorumCert) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f0f2c53b3de771, []int{7}
}

func (m *QuorumCert) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuorumCert.Unmarshal(m, b)
}
func (m *QuorumCert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuorumCert.Marshal(b, m, deterministic)
}
func (m *QuorumCert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuorumCert.Merge(m, src)
}
func (m *QuorumCert) XXX_Size() int {
	return xxx_messageInfo_QuorumCert.Size(m)
}
func (m *QuorumCert) XXX_DiscardUnknown() {
	xxx_messageInfo_QuorumCert.DiscardUnknown(m)
}

var xxx_messageInfo_QuorumCert proto.InternalMessageInfo

func (m *QuorumCert) GetVoteData() *VoteData {
	if m != nil {
		return m.VoteData
	}
	return nil
}

func (m *QuorumCert) GetSignedLedgerInfo() *LedgerInfoWithSignatures {
	if m != nil {
		return m.SignedLedgerInfo
	}
	return nil
}

type VoteData struct {
	// The id of the block being vote for.
	BlockId []byte `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	// The round of the block being voted for
	Round uint64 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	// The id and the version of the state after executing the block.
	ExecutedStateId []byte `protobuf:"bytes,3,opt,name=executed_state_id,json=executedStateId,proto3" json:"executed_state_id,omitempty"`
	Version         uint64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// The id of the parent block
	ParentBlockId []byte `protobuf:"bytes,5,opt,name=parent_block_id,json=parentBlockId,proto3" json:"parent_block_id,omitempty"`
	// The round of the parent block
	ParentBlockRound uint64 `protobuf:"varint,6,opt,name=parent_block_round,json=parentBlockRound,proto3" json:"parent_block_round,omitempty"`
	// The id of the grandparent block
	GrandparentBlockId []byte `protobuf:"bytes,7,opt,name=grandparent_block_id,json=grandparentBlockId,proto3" json:"grandparent_block_id,omitempty"`
	// The round of the grandparent block
	GrandparentBlockRound uint64   `protobuf:"varint,8,opt,name=grandparent_block_round,json=grandparentBlockRound,proto3" json:"grandparent_block_round,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *VoteData) Reset()         { *m = VoteData{} }
func (m *VoteData) String() string { return proto.CompactTextString(m) }
func (*VoteData) ProtoMessage()    {}
func (*VoteData) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f0f2c53b3de771, []int{8}
}

func (m *VoteData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoteData.Unmarshal(m, b)
}
func (m *VoteData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoteData.Marshal(b, m, deterministic)
}
func (m *VoteData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteData.Merge(m, src)
}
func (m *VoteData) XXX_Size() int {
	return xxx_messageInfo_VoteData.Size(m)
}
func (m *VoteData) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteData.DiscardUnknown(m)
}

var xxx_messageInfo_VoteData proto.InternalMessageInfo

func (m *VoteData) GetBlockId() []byte {
	if m != nil {
		return m.BlockId
	}
	return nil
}

func (m *VoteData) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *VoteData) GetExecutedStateId() []byte {
	if m != nil {
		return m.ExecutedStateId
	}
	return nil
}

func (m *VoteData) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *VoteData) GetParentBlockId() []byte {
	if m != nil {
		return m.ParentBlockId
	}
	return nil
}

func (m *VoteData) GetParentBlockRound() uint64 {
	if m != nil {
		return m.ParentBlockRound
	}
	return 0
}

func (m *VoteData) GetGrandparentBlockId() []byte {
	if m != nil {
		return m.GrandparentBlockId
	}
	return nil
}

func (m *VoteData) GetGrandparentBlockRound() uint64 {
	if m != nil {
		return m.GrandparentBlockRound
	}
	return 0
}

type Vote struct {
	// The actual vote information.
	VoteData *VoteData `protobuf:"bytes,1,opt,name=vote_data,json=voteData,proto3" json:"vote_data,omitempty"`
	// Author of the vote.
	Author []byte `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	// The ledger info carried with the vote (corresponding to the block of a
	// potentially committed txn).
	LedgerInfo *LedgerInfo `protobuf:"bytes,3,opt,name=ledger_info,json=ledgerInfo,proto3" json:"ledger_info,omitempty"`
	// Signature of the ledger info.
	Signature            []byte   `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vote) Reset()         { *m = Vote{} }
func (m *Vote) String() string { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()    {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f0f2c53b3de771, []int{9}
}

func (m *Vote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vote.Unmarshal(m, b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
}
func (m *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(m, src)
}
func (m *Vote) XXX_Size() int {
	return xxx_messageInfo_Vote.Size(m)
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_Vote proto.InternalMessageInfo

func (m *Vote) GetVoteData() *VoteData {
	if m != nil {
		return m.VoteData
	}
	return nil
}

func (m *Vote) GetAuthor() []byte {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *Vote) GetLedgerInfo() *LedgerInfo {
	if m != nil {
		return m.LedgerInfo
	}
	return nil
}

func (m *Vote) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type RequestBlock struct {
	// The id of the requested block.
	BlockId              []byte   `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	NumBlocks            uint64   `protobuf:"varint,2,opt,name=num_blocks,json=numBlocks,proto3" json:"num_blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestBlock) Reset()         { *m = RequestBlock{} }
func (m *RequestBlock) String() string { return proto.CompactTextString(m) }
func (*RequestBlock) ProtoMessage()    {}
func (*RequestBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f0f2c53b3de771, []int{10}
}

func (m *RequestBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestBlock.Unmarshal(m, b)
}
func (m *RequestBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestBlock.Marshal(b, m, deterministic)
}
func (m *RequestBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestBlock.Merge(m, src)
}
func (m *RequestBlock) XXX_Size() int {
	return xxx_messageInfo_RequestBlock.Size(m)
}
func (m *RequestBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestBlock.DiscardUnknown(m)
}

var xxx_messageInfo_RequestBlock proto.InternalMessageInfo

func (m *RequestBlock) GetBlockId() []byte {
	if m != nil {
		return m.BlockId
	}
	return nil
}

func (m *RequestBlock) GetNumBlocks() uint64 {
	if m != nil {
		return m.NumBlocks
	}
	return 0
}

type RespondBlock struct {
	Status BlockRetrievalStatus `protobuf:"varint,1,opt,name=status,proto3,enum=network.BlockRetrievalStatus" json:"status,omitempty"`
	// The responded block.
	Blocks               []*Block `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RespondBlock) Reset()         { *m = RespondBlock{} }
func (m *RespondBlock) String() string { return proto.CompactTextString(m) }
func (*RespondBlock) ProtoMessage()    {}
func (*RespondBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f0f2c53b3de771, []int{11}
}

func (m *RespondBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RespondBlock.Unmarshal(m, b)
}
func (m *RespondBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RespondBlock.Marshal(b, m, deterministic)
}
func (m *RespondBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondBlock.Merge(m, src)
}
func (m *RespondBlock) XXX_Size() int {
	return xxx_messageInfo_RespondBlock.Size(m)
}
func (m *RespondBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondBlock.DiscardUnknown(m)
}

var xxx_messageInfo_RespondBlock proto.InternalMessageInfo

func (m *RespondBlock) GetStatus() BlockRetrievalStatus {
	if m != nil {
		return m.Status
	}
	return BlockRetrievalStatus_SUCCEEDED
}

func (m *RespondBlock) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func init() {
	proto.RegisterEnum("network.BlockRetrievalStatus", BlockRetrievalStatus_name, BlockRetrievalStatus_value)
	proto.RegisterType((*ConsensusMsg)(nil), "network.ConsensusMsg")
	proto.RegisterType((*Proposal)(nil), "network.Proposal")
	proto.RegisterType((*PacemakerTimeout)(nil), "network.PacemakerTimeout")
	proto.RegisterType((*TimeoutMsg)(nil), "network.TimeoutMsg")
	proto.RegisterType((*SyncInfo)(nil), "network.SyncInfo")
	proto.RegisterType((*PacemakerTimeoutCertificate)(nil), "network.PacemakerTimeoutCertificate")
	proto.RegisterType((*Block)(nil), "network.Block")
	proto.RegisterType((*QuorumCert)(nil), "network.QuorumCert")
	proto.RegisterType((*VoteData)(nil), "network.VoteData")
	proto.RegisterType((*Vote)(nil), "network.Vote")
	proto.RegisterType((*RequestBlock)(nil), "network.RequestBlock")
	proto.RegisterType((*RespondBlock)(nil), "network.RespondBlock")
}

func init() { proto.RegisterFile("consensus.proto", fileDescriptor_56f0f2c53b3de771) }

var fileDescriptor_56f0f2c53b3de771 = []byte{
	// 942 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x72, 0xdb, 0x44,
	0x14, 0x8e, 0x15, 0xc7, 0x96, 0x4f, 0x6c, 0xc7, 0xde, 0x26, 0xe0, 0xb6, 0x74, 0x28, 0x82, 0x29,
	0x4c, 0x87, 0x31, 0x9d, 0x40, 0x7a, 0xc5, 0x55, 0xec, 0x14, 0x67, 0x68, 0x92, 0xb2, 0x6e, 0xca,
	0xa5, 0x66, 0x2b, 0x6d, 0x64, 0x11, 0x4b, 0xab, 0xec, 0xae, 0x02, 0xb9, 0xe4, 0x9a, 0x2b, 0xde,
	0x80, 0xe1, 0x4d, 0x78, 0x08, 0xde, 0x82, 0x87, 0x60, 0xb4, 0xbb, 0xfa, 0x89, 0x12, 0x9b, 0xe1,
	0xce, 0xe7, 0xef, 0x3b, 0x3f, 0xdf, 0x39, 0x5a, 0xc3, 0x8e, 0xc7, 0x62, 0x41, 0x63, 0x91, 0x8a,
	0x71, 0xc2, 0x99, 0x64, 0xa8, 0x1d, 0x53, 0xf9, 0x33, 0xe3, 0x97, 0x8f, 0x86, 0x4b, 0xea, 0x07,
	0x94, 0xbb, 0x61, 0x7c, 0xc1, 0xb4, 0xed, 0xd1, 0x50, 0x72, 0x12, 0x0b, 0xe2, 0xc9, 0x90, 0xc5,
	0x5a, 0xe5, 0xfc, 0x6d, 0x41, 0x77, 0x92, 0x43, 0x9c, 0x88, 0x00, 0x7d, 0x05, 0x76, 0xc2, 0x59,
	0xc2, 0x04, 0x59, 0x8e, 0x1a, 0x4f, 0x1b, 0x5f, 0x6c, 0xef, 0x0f, 0xc7, 0x06, 0x72, 0xfc, 0xc6,
	0x18, 0x66, 0x1b, 0xb8, 0x70, 0x42, 0x9f, 0x42, 0xf3, 0x9a, 0x49, 0x3a, 0xb2, 0x94, 0x73, 0xaf,
	0x70, 0x7e, 0xc7, 0x24, 0x9d, 0x6d, 0x60, 0x65, 0x44, 0xdf, 0x42, 0x8f, 0xd3, 0xab, 0x94, 0x0a,
	0xe9, 0xbe, 0x5f, 0x32, 0xef, 0x72, 0xb4, 0xa9, 0xbc, 0xf7, 0x0a, 0x6f, 0xac, 0xad, 0x87, 0x99,
	0x71, 0xb6, 0x81, 0xbb, 0xbc, 0x22, 0xeb, 0x68, 0x91, 0xb0, 0xd8, 0x37, 0xd1, 0xcd, 0x3b, 0xd1,
	0xca, 0x5a, 0x89, 0x2e, 0x65, 0xf4, 0x12, 0xb6, 0x65, 0x18, 0x51, 0x96, 0x4a, 0x37, 0x12, 0xc1,
	0x68, 0x4b, 0xc5, 0x3e, 0x28, 0x62, 0xdf, 0x6a, 0xdb, 0x89, 0x08, 0x66, 0x1b, 0x18, 0x64, 0x21,
	0xa1, 0x17, 0xd0, 0x11, 0x37, 0xb1, 0xa7, 0x06, 0x38, 0x6a, 0xd5, 0x46, 0x31, 0xbf, 0x89, 0xbd,
	0xe3, 0xf8, 0x82, 0x65, 0xa3, 0x10, 0xe6, 0xf7, 0x61, 0x07, 0xda, 0x11, 0x15, 0x82, 0x04, 0xd4,
	0xb9, 0x02, 0x3b, 0x9f, 0x16, 0x3a, 0x80, 0xbe, 0x9e, 0x16, 0xcd, 0xeb, 0xd7, 0x83, 0xed, 0x17,
	0x68, 0xaa, 0x50, 0xdc, 0xcb, 0xbd, 0x74, 0xdd, 0xe3, 0x6a, 0x7e, 0x6b, 0x45, 0xfe, 0x32, 0xbb,
	0xf3, 0x6b, 0x03, 0x06, 0x6f, 0x88, 0x47, 0x23, 0x72, 0x49, 0xb9, 0xe9, 0x0a, 0xed, 0xc2, 0x16,
	0x67, 0x69, 0xec, 0xab, 0x94, 0x4d, 0xac, 0x05, 0xf4, 0x01, 0xb4, 0x48, 0x2a, 0x17, 0x8c, 0x2b,
	0xdc, 0x2e, 0x36, 0x12, 0xfa, 0x08, 0x3a, 0x22, 0x0c, 0x62, 0x22, 0x53, 0x4e, 0x15, 0x45, 0x5d,
	0x5c, 0x2a, 0xd0, 0x27, 0x86, 0xe9, 0xe6, 0x3d, 0x4c, 0x6b, 0x9e, 0x9d, 0x3f, 0x1b, 0x00, 0xe5,
	0x40, 0x6f, 0xb7, 0xd0, 0xf8, 0xcf, 0x16, 0xd0, 0x2b, 0x18, 0x26, 0x79, 0x07, 0xae, 0xa1, 0xc2,
	0xb4, 0xfe, 0xb0, 0xdc, 0xc2, 0x5a, 0x8f, 0x78, 0x90, 0xd4, 0xbb, 0x5e, 0xdb, 0x87, 0xf3, 0x4f,
	0x03, 0xec, 0x3c, 0x39, 0x9a, 0xc0, 0x83, 0x45, 0x18, 0x2c, 0xb2, 0xcd, 0xbc, 0x4a, 0x19, 0x4f,
	0x23, 0xd7, 0xa3, 0x5c, 0x9a, 0x62, 0xcb, 0x2d, 0xf9, 0x41, 0xd9, 0x26, 0x94, 0x4b, 0x3c, 0x34,
	0xfe, 0xa5, 0xaa, 0x0a, 0x52, 0xb9, 0x3a, 0x53, 0xf9, 0x5a, 0x90, 0xd7, 0xca, 0x5d, 0x55, 0xf2,
	0x0e, 0x76, 0x73, 0x90, 0x7c, 0x5f, 0x55, 0x29, 0xfa, 0x54, 0x3e, 0x5b, 0xd9, 0x7f, 0x86, 0x17,
	0x5e, 0x84, 0x1e, 0x91, 0x14, 0x23, 0x83, 0x50, 0x31, 0x39, 0x3f, 0xc1, 0xe3, 0x35, 0x21, 0x2b,
	0x36, 0xe4, 0x00, 0x6c, 0x53, 0x84, 0x18, 0x59, 0x4f, 0x37, 0xd7, 0x13, 0x50, 0xb8, 0x3a, 0xbf,
	0x5b, 0xb0, 0xa5, 0xb7, 0xb7, 0x0f, 0x56, 0xa8, 0x31, 0xbb, 0xd8, 0x0a, 0x7d, 0xf4, 0x18, 0x3a,
	0x09, 0xe1, 0x34, 0x96, 0x6e, 0xe8, 0x9b, 0xad, 0xb3, 0xb5, 0xe2, 0xd8, 0x47, 0x23, 0x68, 0x27,
	0xe4, 0x66, 0xc9, 0x88, 0x6f, 0xd8, 0xca, 0xc5, 0xb2, 0xba, 0x66, 0x6d, 0x7f, 0x17, 0x34, 0x0c,
	0x16, 0x52, 0x5d, 0x73, 0x13, 0x1b, 0x09, 0x7d, 0x0e, 0x3b, 0x59, 0x29, 0x42, 0x92, 0x28, 0x71,
	0x53, 0x41, 0x3d, 0xa1, 0x0e, 0xb7, 0x89, 0xfb, 0x85, 0xfa, 0x3c, 0xd3, 0xa2, 0x6f, 0x60, 0xbb,
	0xca, 0x76, 0x7b, 0x35, 0x51, 0x70, 0x55, 0xd2, 0x5c, 0x9e, 0x8d, 0xbd, 0xfa, 0x6c, 0x3a, 0xf5,
	0x75, 0xfb, 0xad, 0x01, 0x50, 0xd9, 0x95, 0x31, 0x74, 0xb2, 0x53, 0x71, 0x7d, 0x22, 0xc9, 0x9d,
	0x9b, 0xc8, 0x4e, 0x69, 0x4a, 0x24, 0xc1, 0xf6, 0xb5, 0xf9, 0x85, 0x4e, 0x00, 0x65, 0x58, 0xd4,
	0xbf, 0x67, 0xb5, 0x3e, 0x1e, 0xcb, 0x9b, 0x84, 0x8a, 0x71, 0xb9, 0x45, 0x3f, 0x86, 0x72, 0x31,
	0xcf, 0x53, 0x0b, 0x3c, 0xd0, 0xa1, 0xa5, 0xdd, 0xf9, 0xcb, 0x02, 0x3b, 0xcf, 0x82, 0x1e, 0x82,
	0xad, 0x3e, 0x48, 0x6e, 0x41, 0x55, 0x5b, 0xc9, 0xc7, 0x95, 0xc1, 0x5b, 0xd5, 0xc1, 0x3f, 0x87,
	0x21, 0xfd, 0x85, 0x7a, 0xa9, 0xa4, 0xbe, 0x2b, 0x24, 0x91, 0x34, 0x8b, 0xd4, 0x94, 0xed, 0xe4,
	0x86, 0x79, 0xa6, 0xd7, 0xa4, 0x5e, 0x53, 0x2e, 0x42, 0x16, 0x1b, 0xf2, 0x72, 0x11, 0x3d, 0x83,
	0x1d, 0xb3, 0x0b, 0x45, 0xf6, 0x2d, 0x85, 0xd1, 0xd3, 0xea, 0x43, 0x53, 0xc3, 0x97, 0x80, 0x6e,
	0xf9, 0xe9, 0x82, 0x34, 0xa3, 0x83, 0x8a, 0x2b, 0x56, 0xb5, 0xbd, 0x80, 0xdd, 0x80, 0x93, 0xd8,
	0xaf, 0x43, 0xb7, 0x15, 0x34, 0xaa, 0xd8, 0x72, 0xfc, 0x97, 0xf0, 0xe1, 0xdd, 0x08, 0x9d, 0xc4,
	0x56, 0x49, 0xf6, 0xea, 0x41, 0x2a, 0x93, 0xf3, 0x47, 0x03, 0x9a, 0xd9, 0x0c, 0xff, 0x37, 0x97,
	0xab, 0xbe, 0xbb, 0xfb, 0xb0, 0x5d, 0x25, 0x77, 0xd3, 0x20, 0xd5, 0xc9, 0xc5, 0xb0, 0x2c, 0x3f,
	0x17, 0xb7, 0x96, 0xae, 0x59, 0x5f, 0xba, 0x19, 0x74, 0xab, 0x4f, 0xea, 0x3a, 0xa6, 0x9f, 0x00,
	0xc4, 0x69, 0xa4, 0xbb, 0x17, 0x86, 0xee, 0x4e, 0x9c, 0x46, 0x2a, 0x50, 0x38, 0x51, 0x86, 0x54,
	0x79, 0x4e, 0x0f, 0xa0, 0x95, 0x31, 0x9f, 0x0a, 0x85, 0xd3, 0xdf, 0x7f, 0x52, 0x7b, 0xc5, 0xa8,
	0xe4, 0x21, 0xbd, 0x26, 0xcb, 0xb9, 0x72, 0xc2, 0xc6, 0x19, 0x3d, 0x83, 0x56, 0x91, 0x61, 0xf3,
	0x9e, 0xc7, 0xcf, 0x58, 0x9f, 0x9f, 0xc2, 0xee, 0x7d, 0x38, 0xa8, 0x07, 0x9d, 0xf9, 0xf9, 0x64,
	0x72, 0x74, 0x34, 0x3d, 0x9a, 0x0e, 0x36, 0xd0, 0x00, 0xba, 0xc7, 0x53, 0xf7, 0xf4, 0xec, 0xad,
	0xfb, 0xea, 0xec, 0xfc, 0x74, 0x3a, 0x68, 0xa0, 0x3d, 0x18, 0x66, 0xe2, 0xd1, 0xe9, 0xd9, 0xf9,
	0x77, 0x33, 0xf7, 0xf0, 0xf5, 0xd9, 0xe4, 0xfb, 0xf9, 0xc0, 0x7a, 0xdf, 0x52, 0xff, 0x73, 0xbe,
	0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0x84, 0x4f, 0x85, 0x92, 0x29, 0x09, 0x00, 0x00,
}
